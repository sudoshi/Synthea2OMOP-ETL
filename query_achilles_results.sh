#!/bin/bash
#
# query_achilles_results.sh - Query Achilles results from the database
#
# This script provides a way to query and view the results generated by the Achilles analysis.
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m'

# Get project root directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR" && pwd)"

# Load environment variables from .env file if it exists
if [ -f "$PROJECT_ROOT/.env" ]; then
    source "$PROJECT_ROOT/.env"
fi

# Default configuration
DB_HOST="${DB_HOST:-localhost}"
DB_PORT="${DB_PORT:-5432}"
DB_NAME="${DB_NAME:-ohdsi}"
DB_USER="${DB_USER:-postgres}"
DB_PASSWORD="${DB_PASSWORD:-acumenus}"
RESULTS_SCHEMA="${RESULTS_SCHEMA:-achilles_results}"

# Print help
print_help() {
  echo -e "${BOLD}USAGE${NC}"
  echo "  $0 [options] [query_type]"
  echo ""
  echo -e "${BOLD}OPTIONS${NC}"
  echo "  --help                   Show this help message and exit"
  echo "  --host <host>            Database host (default: $DB_HOST)"
  echo "  --port <port>            Database port (default: $DB_PORT)"
  echo "  --db <database>          Database name (default: $DB_NAME)"
  echo "  --user <username>        Database username (default: $DB_USER)"
  echo "  --password <password>    Database password"
  echo "  --results-schema <schema> Results schema name (default: $RESULTS_SCHEMA)"
  echo ""
  echo -e "${BOLD}QUERY TYPES${NC}"
  echo "  summary                  Show summary of Achilles analyses"
  echo "  person                   Show person demographics"
  echo "  conditions               Show condition statistics"
  echo "  drugs                    Show drug exposure statistics"
  echo "  procedures               Show procedure statistics"
  echo "  observations             Show observation statistics"
  echo "  visits                   Show visit statistics"
  echo "  data_quality             Show data quality issues"
  echo "  custom <sql>             Run a custom SQL query"
  echo ""
}

# Parse command line arguments
QUERY_TYPE=""
CUSTOM_SQL=""

while [ $# -gt 0 ]; do
  case "$1" in
    --help)
      print_help
      exit 0
      ;;
    --host)
      DB_HOST="$2"
      shift 2
      ;;
    --port)
      DB_PORT="$2"
      shift 2
      ;;
    --db)
      DB_NAME="$2"
      shift 2
      ;;
    --user)
      DB_USER="$2"
      shift 2
      ;;
    --password)
      DB_PASSWORD="$2"
      shift 2
      ;;
    --results-schema)
      RESULTS_SCHEMA="$2"
      shift 2
      ;;
    summary|person|conditions|drugs|procedures|observations|visits|data_quality)
      QUERY_TYPE="$1"
      shift
      ;;
    custom)
      QUERY_TYPE="custom"
      CUSTOM_SQL="$2"
      shift 2
      ;;
    *)
      echo -e "${RED}Unknown option: $1${NC}"
      print_help
      exit 1
      ;;
  esac
done

# Set up database connection
export PGPASSWORD="$DB_PASSWORD"
PSQL_CMD="psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -t -A -F ',' --csv -c"

# Function to run a query and output as CSV
run_query() {
  local query="$1"
  echo -e "${BLUE}Running query:${NC}"
  echo "$query"
  echo -e "${BLUE}Results:${NC}"
  $PSQL_CMD "$query"
}

# Check if results schema exists
schema_exists=$($PSQL_CMD "SELECT EXISTS(SELECT 1 FROM information_schema.schemata WHERE schema_name = '$RESULTS_SCHEMA');")
if [ "$schema_exists" != "t" ]; then
  echo -e "${RED}Error: Schema '$RESULTS_SCHEMA' does not exist. Run Achilles analysis first.${NC}"
  exit 1
fi

# Check if Achilles has completed successfully
tables_exist=$($PSQL_CMD "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = '$RESULTS_SCHEMA';")
if [ "$tables_exist" -eq 0 ]; then
  echo -e "${RED}Error: No tables found in schema '$RESULTS_SCHEMA'. Achilles analysis may not have completed.${NC}"
  exit 1
fi

# Execute query based on query type
case "$QUERY_TYPE" in
  summary)
    echo -e "${BOLD}Achilles Analysis Summary${NC}"
    run_query "SELECT analysis_id, analysis_name, stratum_1_name, stratum_2_name, stratum_3_name, stratum_4_name, stratum_5_name 
              FROM ${RESULTS_SCHEMA}.achilles_analysis 
              ORDER BY analysis_id;"
    
    echo -e "\n${BOLD}Record Counts by Domain${NC}"
    run_query "SELECT analysis_id, analysis_name, count 
              FROM ${RESULTS_SCHEMA}.achilles_results 
              WHERE analysis_id IN (1, 201, 401, 601, 701, 801, 1801) 
              ORDER BY analysis_id;"
    ;;
    
  person)
    echo -e "${BOLD}Person Demographics${NC}"
    
    echo -e "\n${BOLD}Gender Distribution${NC}"
    run_query "SELECT ar.stratum_1 as concept_id, c.concept_name as gender, ar.count 
              FROM ${RESULTS_SCHEMA}.achilles_results ar
              JOIN omop.concept c ON ar.stratum_1 = c.concept_id::varchar
              WHERE ar.analysis_id = 2
              ORDER BY ar.count DESC;"
    
    echo -e "\n${BOLD}Age Distribution${NC}"
    run_query "SELECT stratum_1 as age, count 
              FROM ${RESULTS_SCHEMA}.achilles_results 
              WHERE analysis_id = 101
              ORDER BY stratum_1::int;"
    
    echo -e "\n${BOLD}Race Distribution${NC}"
    run_query "SELECT ar.stratum_1 as concept_id, c.concept_name as race, ar.count 
              FROM ${RESULTS_SCHEMA}.achilles_results ar
              JOIN omop.concept c ON ar.stratum_1 = c.concept_id::varchar
              WHERE ar.analysis_id = 4
              ORDER BY ar.count DESC;"
    ;;
    
  conditions)
    echo -e "${BOLD}Top 20 Conditions${NC}"
    run_query "SELECT ar.stratum_1 as concept_id, c.concept_name as condition_name, ar.count 
              FROM ${RESULTS_SCHEMA}.achilles_results ar
              JOIN omop.concept c ON ar.stratum_1 = c.concept_id::varchar
              WHERE ar.analysis_id = 400
              ORDER BY ar.count DESC
              LIMIT 20;"
    ;;
    
  drugs)
    echo -e "${BOLD}Top 20 Drugs${NC}"
    run_query "SELECT ar.stratum_1 as concept_id, c.concept_name as drug_name, ar.count 
              FROM ${RESULTS_SCHEMA}.achilles_results ar
              JOIN omop.concept c ON ar.stratum_1 = c.concept_id::varchar
              WHERE ar.analysis_id = 700
              ORDER BY ar.count DESC
              LIMIT 20;"
    ;;
    
  procedures)
    echo -e "${BOLD}Top 20 Procedures${NC}"
    run_query "SELECT ar.stratum_1 as concept_id, c.concept_name as procedure_name, ar.count 
              FROM ${RESULTS_SCHEMA}.achilles_results ar
              JOIN omop.concept c ON ar.stratum_1 = c.concept_id::varchar
              WHERE ar.analysis_id = 600
              ORDER BY ar.count DESC
              LIMIT 20;"
    ;;
    
  observations)
    echo -e "${BOLD}Top 20 Observations${NC}"
    run_query "SELECT ar.stratum_1 as concept_id, c.concept_name as observation_name, ar.count 
              FROM ${RESULTS_SCHEMA}.achilles_results ar
              JOIN omop.concept c ON ar.stratum_1 = c.concept_id::varchar
              WHERE ar.analysis_id = 800
              ORDER BY ar.count DESC
              LIMIT 20;"
    ;;
    
  visits)
    echo -e "${BOLD}Visit Type Distribution${NC}"
    run_query "SELECT ar.stratum_1 as concept_id, c.concept_name as visit_type, ar.count 
              FROM ${RESULTS_SCHEMA}.achilles_results ar
              JOIN omop.concept c ON ar.stratum_1 = c.concept_id::varchar
              WHERE ar.analysis_id = 200
              ORDER BY ar.count DESC;"
    
    echo -e "\n${BOLD}Visit Length Distribution${NC}"
    run_query "SELECT min_value, p10_value, p25_value, median_value, p75_value, p90_value, max_value
              FROM ${RESULTS_SCHEMA}.achilles_results_dist
              WHERE analysis_id = 211;"
    ;;
    
  data_quality)
    echo -e "${BOLD}Data Quality Issues${NC}"
    run_query "SELECT issue_id, issue_description, prevalence, record_count
              FROM ${RESULTS_SCHEMA}.dataqualitydashboard_results
              WHERE failed = 't'
              ORDER BY prevalence DESC;"
    ;;
    
  custom)
    if [ -z "$CUSTOM_SQL" ]; then
      echo -e "${RED}Error: No SQL query provided for custom query type.${NC}"
      print_help
      exit 1
    fi
    run_query "$CUSTOM_SQL"
    ;;
    
  *)
    echo -e "${RED}Error: No query type specified.${NC}"
    print_help
    exit 1
    ;;
esac
